func TestUpdateApp(t *testing.T) {
	// Create a test app first
	app := App{Name: "TestApp", Description: "Original description"}
	result, err := db.Exec("INSERT INTO apps (name, description) VALUES (?, ?)", app.Name, app.Description)
	if err != nil {
		t.Fatal(err)
	}
	appID, _ := result.LastInsertId()

	// Now update the app
	updatedApp := App{Name: "UpdatedTestApp", Description: "Updated description"}
	requestBody, _ := json.Marshal(updatedApp)
	req, err := http.NewRequest("PUT", fmt.Sprintf("/apps/%d", appID), bytes.NewBuffer(requestBody))
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	router := mux.NewRouter()
	router.HandleFunc("/apps/{id:[0-9]+}", updateApp).Methods("PUT")
	router.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}

	// Verify that the app was updated
	var updatedAppFromDB App
	err = db.QueryRow("SELECT name, description FROM apps WHERE id = ?", appID).Scan(&updatedAppFromDB.Name, &updatedAppFromDB.Description)
	if err != nil {
		t.Fatal(err)
	}
	if updatedAppFromDB.Name != updatedApp.Name || updatedAppFromDB.Description != updatedApp.Description {
		t.Errorf("app was not updated correctly: got %v, want %v", updatedAppFromDB, updatedApp)
	}
}

