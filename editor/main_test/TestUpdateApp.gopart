func TestUpdateApp(t *testing.T) {
	clearDatabase()
	// Create a test workspace first
	_, err := db.Exec("INSERT INTO workspaces (name, user_id, subdomain, ips) VALUES (?, ?, ?, ?)", "TestWorkspace", 1, "testsubdomain", "10.0.0.1")
	if err != nil {
		t.Fatal(err)
	}

	// Create a test app first
	app := App{Name: "TestApp", Description: "Original description", IPPort: "10.0.0.1:8080", WorkspaceID: 1}
	result, err := db.Exec("INSERT INTO apps (name, description, ip_port, workspace_id) VALUES (?, ?, ?, ?)", 
		app.Name, app.Description, app.IPPort, app.WorkspaceID)
	if err != nil {
		t.Fatal(err)
	}
	appID, _ := result.LastInsertId()

	// Now update the app
	updatedApp := App{Name: "UpdatedTestApp", Description: "Updated description", IPPort: "10.0.0.2:8080", WorkspaceID: 1}
	requestBody, _ := json.Marshal(updatedApp)
	req, err := http.NewRequest("PUT", fmt.Sprintf("/apps/%d", appID), bytes.NewBuffer(requestBody))
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	router := mux.NewRouter()
	router.HandleFunc("/apps/{id:[0-9]+}", updateApp).Methods("PUT")
	router.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}

	// Verify that the app was updated
	var updatedAppFromDB App
	err = db.QueryRow("SELECT name, description, ip_port FROM apps WHERE id = ?", appID).Scan(&updatedAppFromDB.Name, &updatedAppFromDB.Description, &updatedAppFromDB.IPPort)
	if err != nil {
		t.Fatal(err)
	}
	if updatedAppFromDB.Name != updatedApp.Name || updatedAppFromDB.Description != updatedApp.Description || updatedAppFromDB.IPPort != updatedApp.IPPort {
		t.Errorf("app was not updated correctly: got %v, want %v", updatedAppFromDB, updatedApp)
	}
}

