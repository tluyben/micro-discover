func TestDeleteWorkspace(t *testing.T) {
	clearDatabase()
	// Create a test workspace first
	workspace := Workspace{Name: "TestWorkspace", UserID: 1, Subdomain: "testsubdomain", IPs: []string{"10.0.0.1"}}
	result, err := db.Exec("INSERT INTO workspaces (name, user_id, subdomain, ips) VALUES (?, ?, ?, ?)",
		workspace.Name, workspace.UserID, workspace.Subdomain, strings.Join(workspace.IPs, ","))
	if err != nil {
		t.Fatal(err)
	}
	workspaceID, _ := result.LastInsertId()

	// Now delete the workspace
	req, err := http.NewRequest("DELETE", fmt.Sprintf("/workspaces/%d", workspaceID), nil)
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	router := mux.NewRouter()
	router.HandleFunc("/workspaces/{id:[0-9]+}", deleteWorkspace).Methods("DELETE")
	router.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusNoContent {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusNoContent)
	}

	// Verify that the workspace was deleted
	var count int
	err = db.QueryRow("SELECT COUNT(*) FROM workspaces WHERE id = ?", workspaceID).Scan(&count)
	if err != nil {
		t.Fatal(err)
	}
	if count != 0 {
		t.Errorf("workspace was not deleted: got %v records, want 0", count)
	}
}

