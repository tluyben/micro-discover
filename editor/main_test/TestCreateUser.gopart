func TestCreateUser(t *testing.T) {
	setUpTestEnvironment()
	defer tearDownTestEnvironment()

	requestBody := []byte(`{"username":"test@example.com","password":"testpassword"}`)
	req, err := http.NewRequest("POST", "/users", bytes.NewBuffer(requestBody))
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	router := mux.NewRouter()
	router.HandleFunc("/users", createUser).Methods("POST")
	router.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusCreated {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusCreated)
	}

	var response User
	err = json.Unmarshal(rr.Body.Bytes(), &response)
	if err != nil {
		t.Fatal(err)
	}

	if response.Username != "test@example.com" {
		t.Errorf("handler returned unexpected username: got %v want %v", response.Username, "test@example.com")
	}
}
